package demo;
// Generated Nov 20, 2016 9:40:14 PM by Hibernate Tools 4.3.1

import entity.*;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "USERS", catalog = "musicweb", uniqueConstraints = @UniqueConstraint(columnNames = "userName"))
public class Users implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private Integer idUser;
	private String userName;
	private String passwd;
	private String displayName;
	private String email;
	private String phone;
	private String gender;
	private Integer age;
	private String passpost;
	private String linkAvatar;
	private String isAdmin;
	private boolean isBlock;
	private Set<Comments> commentses = new HashSet<Comments>(0);
	private Set<CommentAlbum> commentAlbums = new HashSet<CommentAlbum>(0);
	private Set<Song> songs = new HashSet<Song>(0);
	private Set<Singer> singers = new HashSet<Singer>(0);
	private Set<Album> albums = new HashSet<Album>(0);

	public Users() {
	}

	public Users(String passwd) {
		this.passwd = passwd;
	}

	public Users(Integer idUser, String userName, String passwd, String displayName, String email, String phone,
			String gender, Integer age, String passpost, String linkAvatar, String isAdmin, boolean isBlock,
			Set<Comments> commentses, Set<CommentAlbum> commentAlbums, Set<Song> songs, Set<Singer> singers,
			Set<Album> albums) {
		super();
		this.idUser = idUser;
		this.userName = userName;
		this.passwd = passwd;
		this.displayName = displayName;
		this.email = email;
		this.phone = phone;
		this.gender = gender;
		this.age = age;
		this.passpost = passpost;
		this.linkAvatar = linkAvatar;
		this.isAdmin = isAdmin;
		this.isBlock = isBlock;
		this.commentses = commentses;
		this.commentAlbums = commentAlbums;
		this.songs = songs;
		this.singers = singers;
		this.albums = albums;
	}

	public Users(String userName, String passwd, String displayName, String email, String phone, String gender,
			Integer age, String passpost, String linkAvatar, String isAdmin, boolean isBlock, Set<Comments> commentses,
			Set<CommentAlbum> commentAlbums, Set<Song> songs, Set<Singer> singers, Set<Album> albums) {
		this.userName = userName;
		this.passwd = passwd;
		this.displayName = displayName;
		this.email = email;
		this.phone = phone;
		this.gender = gender;
		this.age = age;
		this.passpost = passpost;
		this.linkAvatar = linkAvatar;
		this.isAdmin = isAdmin;
		this.isBlock = isBlock;
		this.commentses = commentses;
		this.commentAlbums = commentAlbums;
		this.songs = songs;
		this.singers = singers;
		this.albums = albums;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idUser", unique = true, nullable = false)
	public Integer getIdUser() {
		return this.idUser;
	}

	public void setIdUser(Integer idUser) {
		this.idUser = idUser;
	}

	@Column(name = "userName", unique = true, length = 50)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "passwd", nullable = false, length = 28)
	public String getPasswd() {
		return this.passwd;
	}

	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}

	@Column(name = "displayName", length = 100)
	public String getDisplayName() {
		return this.displayName;
	}

	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	@Column(name = "email", length = 50)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "phone", length = 20)
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "gender", length = 6)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Column(name = "age")
	public Integer getAge() {
		return this.age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	@Column(name = "passpost", length = 20)
	public String getPasspost() {
		return this.passpost;
	}

	public void setPasspost(String passpost) {
		this.passpost = passpost;
	}

	@Column(name = "linkAvatar", length = 500)
	public String getLinkAvatar() {
		return this.linkAvatar;
	}

	public void setLinkAvatar(String linkAvatar) {
		this.linkAvatar = linkAvatar;
	}

	@Column(name = "isAdmin", length = 10)
	public String getIsAdmin() {
		return isAdmin;
	}

	public void setIsAdmin(String isAdmin) {
		this.isAdmin = isAdmin;
	}

	@Column(name = "isBlock")
	public boolean isBlock() {
		return isBlock;
	}

	public void setBlock(boolean isBlock) {
		this.isBlock = isBlock;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<Comments> getCommentses() {
		return this.commentses;
	}

	public void setCommentses(Set<Comments> commentses) {
		this.commentses = commentses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "users")
	public Set<CommentAlbum> getCommentAlbums() {
		return this.commentAlbums;
	}

	public void setCommentAlbums(Set<CommentAlbum> commentAlbums) {
		this.commentAlbums = commentAlbums;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "LIKE_SONG", catalog = "musicweb", joinColumns = {
			@JoinColumn(name = "idUser", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "idSong", nullable = false, updatable = false) })
	public Set<Song> getSongs() {
		return this.songs;
	}

	public void setSongs(Set<Song> songs) {
		this.songs = songs;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "FOLLOW", catalog = "musicweb", joinColumns = {
			@JoinColumn(name = "idUser", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "idSinger", nullable = false, updatable = false) })
	public Set<Singer> getSingers() {
		return this.singers;
	}

	public void setSingers(Set<Singer> singers) {
		this.singers = singers;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "LIKE_ALBUM", catalog = "musicweb", joinColumns = {
			@JoinColumn(name = "idUser", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "idAlbum", nullable = false, updatable = false) })
	public Set<Album> getAlbums() {
		return this.albums;
	}

	public void setAlbums(Set<Album> albums) {
		this.albums = albums;
	}

}
